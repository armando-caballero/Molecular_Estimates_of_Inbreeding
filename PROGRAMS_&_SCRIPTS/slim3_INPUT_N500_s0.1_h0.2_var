//Command-line options for running this slim script are:
// for example:
/*	
slim -t -m -d "mean_s=-0.1" -d "beta_s=1.0" -d "mean_a=-0.1" -d "beta_a=1.0" -d "rho_value=0.999" -d "ave_hs=0.2" -d "Ne_pop=500" -d "prop_deleterious=0.05" -d "size_genome=1.25e8" -d "file_output_slim='./slimout'" -d "file_output_pars='./slim_results_tableEff.txt'" -d "phen_out='0'" ./slim3_INPUT_N500_s0.1_h0.2_var
*/

initialize() {
	if (exists("slimgui")) {
		defineConstant("mean_s",-0.1); //mean value for selection
		defineConstant("beta_s", 1.0); //beta value for selection
		defineConstant("mean_a",0.1); //mean value for phenotype
		defineConstant("beta_a", 1.0); //beta value for phenotype
		defineConstant("rho_value",0.999); //correlation for bivariant gamma distribution
		defineConstant("ave_hs",0.2); //average dominance value following Wang
		defineConstant("Ne_pop",500); //population size
		defineConstant("prop_deleterious",0.05); //proportion of deleterious mutations
		defineConstant("size_genome",1800000000); //length chromosome
		defineConstant("file_output_slim","./slim_results_slim_output.txt"); //slim output
		defineConstant("file_output_pars","./slim_results_tableEff.txt"); //table output
		defineConstant("phen_out","1"); //1 if the output in slim format will include the phenotype effect for each m2 mutation
		defineConstant("seed",1234444567); //seed
	}
//	setSeed(seed);
	initializeMutationRate(0.000000004);	

	alpha_s = beta_s/mean_s;
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0, "f", 0.0);// "g", beta_s/alpha_s, beta_s);
	
	// g1 genomic element type: uses m1 and m2 with a proportion
	initializeGenomicElementType("g1", c(m1,m2), c(1-prop_deleterious,prop_deleterious));
	
	// uniform chromosome of length 100 Mb with uniform recombination
	initializeGenomicElement(g1, 0, size_genome-1);	

	rates = c(8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9, 0.5, 8e-9);
	ends = c(124999999, 125000000, 249999999, 250000000, 374999999, 375000000, 499999999, 500000000, 624999999, 625000000, 749999999, 750000000, 874999999, 875000000, 999999999, 1000000000, 1124999999, 1125000000, 1249999999, 1250000000, 1374999999, 1375000000, 1499999999, 1500000000, 1624999999, 1625000000, 1749999999, 1750000000, 1874999999, 1875000000, 1999999999, 2000000000, 2124999999, 2125000000, 2249999999);

//	rates = c(1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8);
//	ends = c(124999999, 125000000, 249999999, 250000000, 374999999, 375000000, 499999999, 500000000, 624999999, 625000000, 749999999, 750000000, 874999999, 875000000, 999999999, 1000000000, 1124999999, 1125000000, 1249999999, 1250000000, 1374999999, 1375000000, 1499999999, 1500000000, 1624999999, 1625000000, 1749999999, 1750000000, 1874999999, 1875000000, 1999999999, 2000000000, 2124999999, 2125000000, 2249999999);

	initializeRecombinationRate(rates, ends);

//	initializeRecombinationRate(8e-9);

	//Se calcula un valor de k que depende del alpha (escala) y beta (forma) de la distribucion gamma y del h promedio (ave_hs) con esto: 
	//k_s = alpha_s * (pow((2.0*ave_hs),((-1.0)/beta_s))-1.0); // tengo que mirarlo ...
	//Y luego los valores de h se obtienen de una uniforme entre 0 y este valor
	//exp(-k__a*a[m]);
	defineConstant("K",-alpha_s * ((2.0*ave_hs)^((-1.0)/beta_s)-1.0));
}

//FUNCTIONS 
//bivariant gamma from code Keightley
function (float)bivariant_gamma(integer n, numeric mean1, numeric shape1, numeric mean2, numeric shape2, numeric rhoo)
{
   res1=NULL;
   res2=NULL;
   
   if(n==0 | mean1==0 | shape1==0 | mean2==0 | shape2==0) {
   	print("Error: Parameters inside bivariant_gamma() function cannot be zero.");
   	sim.simulationFinished();
   }  
   else if(n<0 | shape1<0 | shape2<0) {
   	print("Error: shape parameters inside bivariant_gamma() function cannot be less than zero.");
   	sim.simulationFinished();
   }  
   else if(rhoo>1 | rhoo<=0) {
   	print("Error: rho inside bivariant_gamma() function must be larger than 0 and smaller than 1.");
   	sim.simulationFinished();
   }
	else {
   	shapey3 = rhoo*sqrt(shape1*shape2);
   	shapey1 = shape1 - shapey3;
   	shapey2 = shape2 - shapey3;

		if ((rhoo > shape1/shapey3) | (rhoo > shape2/shapey3 )) {
			print("rho is too large for this generate_bivariate_gamma");
	   	sim.simulationFinished();
		}		
		else if ((shapey1 < 0) | (shapey2 < 0)) {
			print("Negative shapey1 or shapey2 not allowed in generate_bivariate_gamma");
	   	sim.simulationFinished();
		}
		else {
			y1 = rgamma(n=n,mean=shapey1,shape=shapey1);
			y2 = rgamma(n=n,mean=shapey2,shape=shapey2);
			y3 = rgamma(n=n,mean=rhoo,shape=rhoo);
			
			z1 = y1 + y3;
			z2 = y2 + y3;
			
			alfa1 = shape1 / mean1;
			res1 = z1 / alfa1;
			
			alfa2 = shape2 / mean2;
			res2 = z2 / alfa2;
		}
	}
	return c(res1,res2);
}

//print in a file a table with position,s,h,effects:
function (void)output_fit_plus_phen(string filePath)
{
	mut_pos = NULL;
	mut_SCf = NULL;
	mut_dom = NULL;
	mut_efs = NULL;

	for(ind in sim.subpopulations.individuals) {
		muts = sortBy(ind.genomes.mutationsOfType(m2),"position");
		if(size(muts)) {
			j = 0;
			while(j<size(muts)) {
				mut_pos = c(mut_pos, asFloat(muts[j].position));
				mut_SCf = c(mut_SCf, asFloat(muts[j].getValue("SelCoeff")));
				mut_dom = c(mut_dom, asFloat(muts[j].getValue("h")));
				mut_efs = c(mut_efs, asFloat(muts[j].getValue("PhenEffect")));
				
				j = j + 1;
			}
		}
	}

	//now do a matrix, sort and remove repeated row values (by position)
	writeFile(filePath=filePath,contents=("POS\tSCOEF\tDOM\tEFFSIZE"),append=F);
	mut_array = cbind(mut_pos,mut_SCf,mut_dom,mut_efs);
	mut_array = mut_array[order(mut_array[,0]),];
	un_mut_array = unique(mut_array[,0]);
	new_mut_array = NULL;
	if(size(un_mut_array)) {
		for(i in 0:(size(un_mut_array)-1)) {
			new_mut_array = rbind(new_mut_array,mut_array[(which(mut_array[,0]==un_mut_array[i])[0]),]);
		}
		//print results
		for(j in 0:(size(un_mut_array)-1)) {
			writeFile(filePath=filePath,contents=(asInteger(new_mut_array[j,0]) + "\t" + new_mut_array[j,1] + "\t" + new_mut_array[j,2] + "\t" + new_mut_array[j,3] + "\t"),append=T);
		}
	}	

	return;
}

//modify the phenotypic effect and sel.coef using bivariant gamma distribution
mutation(m2) {
	Sel_PhenEffect = bivariant_gamma(n=1,mean1=mean_s,shape1=beta_s,mean2=mean_a,shape2=beta_a,rhoo=rho_value);
	if(Sel_PhenEffect[0] < -1) {Sel_PhenEffect[0] = -1; } //print("s<1");
	mut.setValue("SelCoeff", Sel_PhenEffect[0]);
	//PhenEffect: half negative, half positive
	mut.setValue("PhenEffect", Sel_PhenEffect[1] * sample(c(-1,1),size=1,replace=T,weights=c(1,1))); 
	//dominance
	mut.setValue("h",runif(n=1,min=0,max=exp(Sel_PhenEffect[0]*K)));
	//test debugging
	/*
	print("\nm2:\nSelCoef: " + mut.selectionCoeff + 
	      "\nPhenEffect: " + mut.getValue("PhenEffect") +
	      "\nh: " + mut.getValue("h") +
	      "\nPosition: " + mut.position);
	*/
	return T;
}
//calculate fitness per mutation and individual (total fitness per individual is mutlÂ¡iplicative)
fitness(m2) {
	hh = homozygous? 1.0 else mut.getValue("h");
	return 1.0 + hh * mut.getValue("SelCoeff"); // 1 + hs
}

//RUN GENERATIONS
// create a population of 500 individuals
1 {
	sim.addSubpop("p1", Ne_pop);
}

// output full genome in MS format or in slim format plus a file with pos,s,h,phenotype
5000 late() {	 
	//p1.outputMSSample(sampleSize=100,replace=F,filePath="~/slim_results_ms.txt");
	sim.outputFull(filePath=file_output_slim + "_tmp.txt");
	output_fit_plus_phen(filePath=file_output_pars);
	print("perl transfer_sel_dom.pl -i " + file_output_slim + "_tmp.txt" + " -t " + file_output_pars + " -o " + file_output_slim + " -p " + phen_out);
	system("perl transfer_sel_dom.pl -i " + file_output_slim + "_tmp.txt" + " -t " + file_output_pars + " -o " + file_output_slim + " -p " + phen_out);
	print("rm " + file_output_slim + "_tmp.txt");
	system("rm " + file_output_slim + "_tmp.txt");
	print("Simulation finished.");
	sim.simulationFinished();
}
